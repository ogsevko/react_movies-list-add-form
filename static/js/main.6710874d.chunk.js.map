{"version":3,"sources":["components/MovieCard/MovieCard.js","components/MoviesList/MoviesList.js","components/NewMovie/NewMovie.js","App.js","index.js"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","defaultProps","MoviesList","movies","map","movie","key","imdbId","NewMovie","state","titleError","imgUrlError","imdbUrlError","imdbIdError","isFormInvalid","handleChange","name","event","errorName","concat","setState","target","value","handleBlur","replace","length","test","handleSubmit","preventDefault","addMovie","props","onSubmit","this","type","maxLength","onChange","onBlur","required","disabled","Component","App","moviesFromServer","prevState","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6710874d.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './MovieCard.scss';\n\nexport const MovieCard = ({ title, description, imgUrl, imdbUrl }) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n\nMovieCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  imgUrl: PropTypes.string.isRequired,\n  imdbUrl: PropTypes.string.isRequired,\n};\n\nMovieCard.defaultProps = {\n  description: '',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\nexport const MoviesList = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      description: PropTypes.string,\n      imgUrl: PropTypes.string.isRequired,\n      imdbUrl: PropTypes.string.isRequired,\n    }),\n  ),\n};\n\nMoviesList.defaultProps = {\n  movies: [],\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport class NewMovie extends Component {\n  state = {\n    title: '',\n    description: '',\n    imgUrl: '',\n    imdbUrl: '',\n    imdbId: '',\n    titleError: false,\n    imgUrlError: false,\n    imdbUrlError: false,\n    imdbIdError: false,\n    isFormInvalid: false,\n  };\n\n  handleChange = (name, event) => {\n    const errorName = name.concat('Error');\n\n    this.setState({\n      [name]: event.target.value,\n      [errorName]: false,\n    });\n  }\n\n  handleBlur = (name, event) => {\n    const errorName = name.concat('Error');\n\n    if (name !== 'imgUrl' && name !== 'imdbUrl') {\n      if (event.target.value.replace(/\\s+/g, '').length === 0) {\n        this.setState({\n          [errorName]: true,\n          isFormInvalid: true,\n        });\n      }\n    } else {\n      // eslint-disable-next-line max-len\n      const urlRegex = /[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_+.~#?&//=]*)/;\n\n      if (!urlRegex.test(event.target.value)) {\n        this.setState({\n          [errorName]: true,\n          isFormInvalid: true,\n        });\n      }\n    }\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n\n    const { addMovie } = this.props;\n\n    addMovie({\n      title: this.state.title,\n      description: this.state.description,\n      imgUrl: this.state.imgUrl,\n      imdbUrl: this.state.imdbUrl,\n      imdbId: this.state.imdbId,\n    });\n\n    this.setState({\n      title: '',\n      description: '',\n      imgUrl: '',\n      imdbUrl: '',\n      imdbId: '',\n    });\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label>\n          Title:\n          <br />\n          <input\n            type=\"text\"\n            name=\"title\"\n            maxLength={150}\n            className={this.state.titleError ? 'form__input-error' : ''}\n            value={this.state.title}\n            onChange={event => this.handleChange('title', event)}\n            onBlur={event => this.handleBlur('title', event)}\n            required\n          />\n        </label>\n        <br />\n        {\n          this.state.titleError\n            ? (\n              <>\n                <span className=\"error\">\n                  Please enter a title\n                </span>\n                <br />\n              </>\n            )\n            : (\n              <span />\n            )\n        }\n        <label>\n          Description:\n          <br />\n          <input\n            type=\"textarea\"\n            name=\"description\"\n            maxLength={300}\n            value={this.state.description}\n            onChange={event => this.handleChange('description', event)}\n          />\n        </label>\n        <br />\n        <label>\n          Poster (insert url):\n          <br />\n          <input\n            type=\"text\"\n            name=\"imgUrl\"\n            className={this.state.imgUrlError ? 'form__input-error' : ''}\n            value={this.state.imgUrl}\n            onChange={event => this.handleChange('imgUrl', event)}\n            onBlur={event => this.handleBlur('imgUrl', event)}\n            required\n          />\n        </label>\n        <br />\n        {\n          this.state.imgUrlError\n            ? (\n              <>\n                <span className=\"error\">\n                  Please enter a valid url\n                </span>\n                <br />\n              </>\n            )\n            : (\n              <span />\n            )\n        }\n        <label>\n          IMDb (insert url):\n          <br />\n          <input\n            type=\"text\"\n            name=\"imdbUrl\"\n            className={this.state.imdbUrlError ? 'form__input-error' : ''}\n            value={this.state.imdbUrl}\n            onChange={event => this.handleChange('imdbUrl', event)}\n            onBlur={event => this.handleBlur('imdbUrl', event)}\n            required\n          />\n        </label>\n        <br />\n        {\n          this.state.imgUrlError\n            ? (\n              <>\n                <span className=\"error\">\n                  Please enter a valid url\n                </span>\n                <br />\n              </>\n            )\n            : (\n              <span />\n            )\n        }\n        <label>\n          IMDb id:\n          <br />\n          <input\n            type=\"text\"\n            name=\"imdbId\"\n            className={this.state.imdbIdError ? 'form__input-error' : ''}\n            value={this.state.imdbId}\n            onChange={event => this.handleChange('imdbId', event)}\n            onBlur={event => this.handleBlur('imdbId', event)}\n            required\n          />\n        </label>\n        <br />\n        {\n          this.state.imdbIdError\n            ? (\n              <>\n                <span className=\"error\">\n                  Please enter IMDb id of the movie\n                </span>\n                <br />\n              </>\n            )\n            : (\n              <span />\n            )\n        }\n        <button\n          type=\"submit\"\n          disabled={this.state.isFormInvalid}\n        >\n          Add\n        </button>\n      </form>\n    );\n  }\n}\n\nNewMovie.propTypes = {\n  addMovie: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie/NewMovie';\nimport moviesFromServer from './api/movies.json';\n\nexport class App extends Component {\n  state = {\n    movies: moviesFromServer,\n  };\n\n  addMovie = (movie) => {\n    this.setState(prevState => ({\n      movies: [...prevState.movies, movie],\n    }));\n  };\n\n  render() {\n    const { movies } = this.state;\n\n    return (\n      <div className=\"page\">\n        <div className=\"page-content\">\n          <MoviesList movies={movies} />\n        </div>\n        <div className=\"sidebar\">\n          <NewMovie addMovie={this.addMovie} />\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}